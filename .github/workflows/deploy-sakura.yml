name: Deploy to Sakura Internet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SAKURA_HOST }}
        username: ${{ secrets.SAKURA_USERNAME }}
        password: ${{ secrets.SAKURA_PASSWORD }}
        script: |
          cd ${{ secrets.SAKURA_DEPLOY_PATH }}
          git pull origin main
          
          # 段階1: 環境確認
          echo "=== 環境確認 ==="
          echo "Python version:"
          python3 --version || echo "Python3 not found"
          echo "Python path:"
          which python3
          echo "Python modules:"
          python3 -c "import sys; print('\\n'.join(sys.path))"
          echo "Pip version:"
          python3 -m pip --version || echo "Pip not found"
          echo "Pkg available:"
          pkg --version || echo "pkg not available"
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "=================="
          
          # 段階2: pipのインストール
          echo "=== pipインストール ==="
          echo "Python 3.8用のget-pip.pyをダウンロード:"
          curl -s https://bootstrap.pypa.io/pip/3.8/get-pip.py -o get-pip.py || echo "get-pip.py download failed"
          echo "pipをインストール:"
          python3 get-pip.py --user || echo "pip install failed"
          echo "pipの確認:"
          python3 -m pip --version || echo "pip not found"
          echo "====================="
          
          # 段階3: 仮想環境の確認・作成
          echo "=== 仮想環境確認 ==="
          echo "仮想環境の存在確認..."
          ls -la | grep venv || echo "venvディレクトリが見つかりません"
          
          echo "仮想環境を作成します..."
          python3 -m venv venv
          echo "仮想環境を作成しました"
          
          echo "仮想環境をアクティベート..."
          source venv/bin/activate
          echo "アクティベート後のPython:"
          python --version
          echo "アクティベート後のPip:"
          python -m pip --version
          echo "====================="
          
          # 段階4: 依存関係のインストール
          echo "=== 依存関係インストール ==="
          echo "requirements.txtの内容確認:"
          cat requirements.txt
          echo "依存関係をインストール:"
          python -m pip install -r requirements.txt || echo "依存関係のインストールに失敗"
          echo "インストールされたパッケージ:"
          python -m pip list
          echo "====================="
          
          # 段階5: Django設定とマイグレーション
          echo "=== Django設定とマイグレーション ==="
          echo "Djangoのバージョン確認:"
          python -m django --version
          echo "データベースマイグレーション:"
          python manage.py migrate || echo "マイグレーションに失敗"
          echo "静的ファイルの収集:"
          python manage.py collectstatic --noinput || echo "静的ファイル収集に失敗"
          echo "Django設定の確認:"
          python manage.py check || echo "Django設定に問題があります"
          echo "====================="
          
          # 段階6: アプリケーション起動
          echo "=== アプリケーション起動 ==="
          echo "現在のプロセス確認:"
          ps aux | grep gunicorn || echo "Gunicornプロセスなし"
          echo "Gunicornの起動テスト:"
          timeout 10s python -m gunicorn kakeibo_project.wsgi:application --bind 0.0.0.0:8000 --workers 1 || echo "Gunicorn起動テスト完了"
          echo "ポート8000の確認:"
          sockstat -l | grep 8000 || echo "ポート8000でリッスンしていません"
          echo "====================="
          
          # 段階7: アプリケーション起動と動作確認
          echo "=== アプリケーション起動と動作確認 ==="
          echo "既存のGunicornプロセスを停止:"
          pkill -f gunicorn || echo "停止するプロセスなし"
          echo "Gunicornをバックグラウンドで起動:"
          nohup python -m gunicorn kakeibo_project.wsgi:application --bind 0.0.0.0:8000 --workers 1 --daemon || echo "Gunicorn起動に失敗"
          echo "3秒待機..."
          sleep 3
          echo "Gunicornプロセスの確認:"
          ps aux | grep gunicorn
          echo "ポート8000の確認:"
          netstat -an | grep 8000 || echo "netstatでポート確認できません"
          echo "動作確認（curl）:"
          curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost:8000 || echo "curlでアクセスできません"
          echo "=====================" 